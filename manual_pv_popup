import tkinter as tk
from tkinter import ttk, messagebox


class ManualPVPopup:
    def __init__(self, parent, main_data, on_save):
        """
        Initialize the Manual PV Pop-Up.

        :param parent: The parent window (usually root).
        :param main_data: The main data DataFrame containing TRADEIDENTIFIERs.
        :param on_save: Callback function to handle the saving of manual PVs.
        """
        self.parent = parent
        self.main_data = main_data
        self.on_save = on_save

        self.popup = tk.Toplevel(parent)
        self.popup.title("Manual PV Entry")
        self.popup.geometry("500x400")

        self.build_ui()

    def build_ui(self):
        """Build the UI for the pop-up."""
        tk.Label(self.popup, text="Enter PVs for Trade Identifiers:", font=("Arial", 12)).pack(pady=10)

        # Create a Frame for the Main Layout
        main_frame = ttk.Frame(self.popup)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # Left Frame for Trade Identifiers
        left_frame = ttk.Frame(main_frame)
        left_frame.pack(side="left", fill="y", padx=10)

        tk.Label(left_frame, text="Trade Identifiers", font=("Arial", 10)).pack(anchor="w", pady=5)

        self.trade_id_listbox = tk.Listbox(left_frame, height=20, width=25)
        self.trade_id_listbox.pack(fill="y", expand=True)

        # Populate Trade Identifiers
        try:
            trade_ids = self.main_data["TRADEIDENTIFIER"].dropna().unique()
            for trade_id in trade_ids:
                self.trade_id_listbox.insert(tk.END, trade_id)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to load Trade Identifiers: {e}")

        # Right Frame for PV Entry
        right_frame = ttk.Frame(main_frame)
        right_frame.pack(side="left", fill="both", expand=True, padx=10)

        tk.Label(right_frame, text="PV Values", font=("Arial", 10)).pack(anchor="w", pady=5)

        self.pv_entries = {}

        self.entry_frame = ttk.Frame(right_frame)
        self.entry_frame.pack(fill="both", expand=True)

        # Create Entry Widgets for each Trade Identifier
        for trade_id in trade_ids:
            row_frame = ttk.Frame(self.entry_frame)
            row_frame.pack(fill="x", pady=2)

            label = ttk.Label(row_frame, text=trade_id, width=20, anchor="w")
            label.pack(side="left", padx=5)

            entry = ttk.Entry(row_frame)
            entry.pack(side="left", fill="x", expand=True, padx=5)

            self.pv_entries[trade_id] = entry

        # Add Save Button
        save_button = tk.Button(self.popup, text="Save", command=self.save_pvs)
        save_button.pack(pady=10)

    def save_pvs(self):
        """Collect data from the entry fields and call the save callback."""
        try:
            manual_pvs = {}
            for trade_id, entry in self.pv_entries.items():
                pv_value = entry.get()
                if pv_value:  # Ensure PV value is not empty
                    manual_pvs[trade_id] = float(pv_value)

            self.on_save(manual_pvs)
            self.popup.destroy()
        except ValueError:
            messagebox.showerror("Error", "Please enter valid numeric PV values.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save PVs: {e}")
